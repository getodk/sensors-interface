/**************************************************************************************************
 GRADLE CONFIG
 *************************************************************************************************/

if ((new File(gradle.local)).exists()) {
    apply from: gradle.local
} else {
    apply from: gradle.remote
}

libraryScripts.each {
    apply from: it
}

apply plugin: 'com.android.library'
apply plugin: "com.jfrog.artifactory"
apply plugin: "maven-publish"

group = groupId

android {
    // The following are set in the common.gradle file
    compileSdkVersion(compileVersion)
    buildToolsVersion(buildTools)

    defaultConfig {
        minSdkVersion(minVersion)
        targetSdkVersion(targetVersion)
        versionCode(releaseVersionCode)
        versionName(versionCodeName)
        testInstrumentationRunner(instrumentationRunner)
    }

    // set by command line arguments
    defaultPublishConfig(gradle.ext.odkDefaultPublishConfig)

    flavorDimensions "stage", "testing"

    productFlavors {
        demo {
            dimension 'stage'
        }

        master {
            dimension 'stage'
        }

        snapshot {
            dimension 'stage'
        }

        basic {
            dimension 'testing'
        }

        uitest {
            minSdkVersion(uitestMinSDK)
            dimension 'testing'
        }
    }

    signingConfigs {
        release {
            if (shouldSign) {
                storeFile file(signStoreFilePath)
                storePassword signStorePass
                keyAlias signKeyAlias
                keyPassword signKeyPass
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled(minify)
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'

            if (shouldSign) {
                signingConfig signingConfigs.release
            }
        }
        debug {
            debuggable(true)
            testCoverageEnabled(testCoverage) // Allows AndroidTest JaCoCo reports to be generated
        }
    }

    packagingOptions {
        // Pick first occurrence of any files that cause conflicts, as defined in common.gradle
        packageList.each {
            pickFirst it
        }
    }

    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }

}

configurations.all {
    resolutionStrategy {
        cacheDynamicVersionsFor(0, 'seconds')
        cacheChangingModulesFor(0, 'seconds')
    }
}


dependencies {
    api fileTree(include: '*.jar', dir: 'libs')
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.legacy:legacy-support-v13:1.0.0'

    // Testing dependencies
    testImplementation 'junit:junit:4.12'
    testImplementation 'androidx.annotation:annotation:1.1.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
	androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.annotation:annotation:1.1.0'
}

publishing {
    publications {
        aarRelease(MavenPublication) {}
        aarDebug(MavenPublication) {}
    }
    repositories {
        ivy {
            ivyPattern('[organisation]/[module]/[revision]/ivy-[revision].xml')
            artifactPattern('[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]')
        }
    }
}


task spawnSensorsInterfaceSnapshotBasicArchives{
    dependsOn('snapshotVersion')
    dependsOn('assembleSnapshotBasicDebug')
    dependsOn('assembleSnapshotBasicRelease')
    doLast {
        bundleSnapshotBasicReleaseAar.classifier snapshotRelease
        bundleSnapshotBasicDebugAar.classifier snapshotDebug

        publishing.publications.aarRelease.artifact bundleSnapshotBasicReleaseAar
        publishing.publications.aarDebug.artifact bundleSnapshotBasicDebugAar

        project.getArtifacts().add("default", bundleSnapshotBasicDebugAar)
    }
}

task spawnSensorsInterfaceDemoBasicArchives{
    dependsOn('snapshotVersion')
    dependsOn('assembleDemoBasicDebug')
    dependsOn('assembleDemoBasicRelease')
    doLast {
        bundleDemoBasicReleaseAar.classifier demoRelease
        bundleDemoBasicDebugAar.classifier demoDebug

        publishing.publications.aarRelease.artifact bundleDemoBasicReleaseAar
        publishing.publications.aarDebug.artifact bundleDemoBasicDebugAar

        project.getArtifacts().add("default", bundleDemoBasicDebugAar)
    }
}

artifactoryPublish.mustRunAfter('spawnSensorsInterfaceSnapshotBasicArchives')
artifactoryPublish.mustRunAfter('spawnSensorsInterfaceDemoBasicArchives')
